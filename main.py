import random
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import json
import re
import os
import re

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN is not set in environment variables.")
bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_temp_data = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                    (chat_id INTEGER PRIMARY KEY, 
                     username TEXT,
                     reminder_time TEXT DEFAULT '14:00',
                     streak INTEGER DEFAULT 0,
                     last_active TEXT)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS stats
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     chat_id INTEGER,
                     date TEXT,
                     mental_tasks INTEGER DEFAULT 0,
                     physical_tasks INTEGER DEFAULT 0,
                     FOREIGN KEY(chat_id) REFERENCES users(chat_id))''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS achievements
                    (chat_id INTEGER,
                     badge_name TEXT,
                     progress INTEGER,
                     FOREIGN KEY(chat_id) REFERENCES users(chat_id))''')

    conn.commit()
    conn.close()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π
def load_tasks():
    default_tasks = {
        "mental": ["–ü—Ä–æ—á–∏—Ç–∞–π 10 —Å—Ç—Ä–∞–Ω–∏—Ü", "–í—ã—É—á–∏ 5 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤"],
        "physical": ["10 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "1 –º–∏–Ω—É—Ç–∞ –ø–ª–∞–Ω–∫–∏", "15 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏"]
    }

    if not os.path.exists('tasks.json'):
        return default_tasks

    try:
        with open('tasks.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return default_tasks


tasks = load_tasks()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üöÄ")],
            [KeyboardButton(text="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä"), KeyboardButton(text="–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")]
        ],
        resize_keyboard=True
    )


def get_tasks_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—Å–µ –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton(text="–¢–æ–ª—å–∫–æ —É–º—Å—Ç–≤–µ–Ω–Ω—ã–µ üß†")],
            [KeyboardButton(text="–¢–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ üí™"), KeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")]
        ],
        resize_keyboard=True
    )


def get_actions_kb(has_timer=False):
    if has_timer:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è±Ô∏è")],
                [KeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏–ª! ‚úÖ"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–í—ã–ø–æ–ª–Ω–∏–ª! ‚úÖ"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")]
            ],
            resize_keyboard=True
        )


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∑–∞–¥–∞–Ω–∏—è
def extract_minutes(task_text):
    match = re.search(r'(\d+)\s*–º–∏–Ω—É—Ç', task_text)
    if match:
        return int(match.group(1))
    match = re.search(r'(\d+)\s*–º–∏–Ω', task_text)
    if match:
        return int(match.group(1))
    return None


# –¢–∞–π–º–µ—Ä
async def run_timer(chat_id, minutes):
    total_seconds = minutes * 60
    message = await bot.send_message(chat_id, f"‚è≥ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç...")

    for remaining in range(total_seconds, 0, -1):
        mins, secs = divmod(remaining, 60)
        timer_text = f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {mins:02d}:{secs:02d}"
        try:
            await bot.edit_message_text(
                timer_text,
                chat_id=chat_id,
                message_id=message.message_id
            )
        except:
            pass
        await asyncio.sleep(1)

    await bot.send_message(chat_id, "üîî –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def setup_reminders():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''SELECT chat_id, reminder_time FROM users''')
        for chat_id, reminder_time in cursor.fetchall():
            if reminder_time:
                hours, minutes = map(int, reminder_time.split(':'))
                scheduler.add_job(
                    send_reminder,
                    'cron',
                    hour=hours,
                    minute=minutes,
                    args=[chat_id]
                )
    finally:
        conn.close()


# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(chat_id):
    await bot.send_message(
        chat_id,
        "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π! –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üöÄ'",
        reply_markup=get_main_kb()
    )


# –ö–æ–º–∞–Ω–¥–∞ /start –∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"
@dp.message(Command("start"))
@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üöÄ")
async def start(message: types.Message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT OR IGNORE INTO users (chat_id, username) VALUES (?, ?)''',
                   (message.chat.id, message.from_user.username))
    conn.commit()
    conn.close()

    await message.answer(
        "üèÜ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞!\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π:",
        reply_markup=get_tasks_kb()
    )


# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.message(F.text == "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def show_stats(message: types.Message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''SELECT SUM(mental_tasks), SUM(physical_tasks) FROM stats 
                        WHERE chat_id = ?''', (message.chat.id,))
        mental, physical = cursor.fetchone() or (0, 0)

        cursor.execute('''SELECT streak FROM users WHERE chat_id = ?''', (message.chat.id,))
        streak_row = cursor.fetchone()
        streak = streak_row[0] if streak_row else 0

        response = (
            f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–£–º—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {mental} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
            f"–§–∏–∑—É—Ö–∞: {physical} —Ä–∞–∑\n"
            f"–î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {streak}"
        )

        await message.answer(response, reply_markup=get_main_kb())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()


# –ü–æ–∫–∞–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
@dp.message(F.text == "–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ")
async def show_achievements(message: types.Message):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        cursor.execute('''SELECT badge_name FROM achievements 
                        WHERE chat_id = ?''', (message.chat.id,))
        badges = [row[0] for row in cursor.fetchall()]

        if badges:
            response = "–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(badges)
        else:
            response = "–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ, —Ä–∞–±–æ—Ç–∞–π –¥–∞–ª—å—à–µ"

        await message.answer(response, reply_markup=get_main_kb())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()


# –í—ã–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π
@dp.message(F.text.in_(["–í—Å–µ –∑–∞–¥–∞–Ω–∏—è", "–¢–æ–ª—å–∫–æ —É–º—Å—Ç–≤–µ–Ω–Ω—ã–µ üß†", "–¢–æ–ª—å–∫–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ üí™"]))
async def send_tasks(message: types.Message):
    mental = random.choice(tasks["mental"])
    physical = random.choice(tasks["physical"])

    if message.text == "–í—Å–µ –∑–∞–¥–∞–Ω–∏—è":
        response = f"üß† –£–º—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{mental}\n\nüí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{physical}"
        user_temp_data[message.chat.id] = {
            "type": "both",
            "physical_task": physical
        }
        has_timer = extract_minutes(physical) is not None
    elif message.text == "–¢–æ–ª—å–∫–æ —É–º—Å—Ç–≤–µ–Ω–Ω—ã–µ üß†":
        response = f"üß† –£–º—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{mental}"
        user_temp_data[message.chat.id] = {"type": "mental"}
        has_timer = False
    else:
        response = f"üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{physical}"
        user_temp_data[message.chat.id] = {
            "type": "physical",
            "physical_task": physical
        }
        has_timer = extract_minutes(physical) is not None

    await message.answer(response, reply_markup=get_actions_kb(has_timer=has_timer))


# –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
@dp.message(F.text == "–í–∫–ª—é—á–∏—Ç—å —Ç–∞–π–º–µ—Ä ‚è±Ô∏è")
async def start_timer(message: types.Message):
    user_data = user_temp_data.get(message.chat.id, {})
    if "physical_task" in user_data:
        minutes = extract_minutes(user_data["physical_task"])
        if minutes:
            await message.answer(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç!")
            await run_timer(message.chat.id, minutes)
        else:
            await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "–í—ã–ø–æ–ª–Ω–∏–ª! ‚úÖ")
async def task_completed(message: types.Message):
    task_type = user_temp_data.get(message.chat.id, {}).get("type", "both")
    today = datetime.now().strftime("%Y-%m-%d")

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('''INSERT OR IGNORE INTO stats (chat_id, date) VALUES (?, ?)''',
                       (message.chat.id, today))

        if task_type in ["both", "mental"]:
            cursor.execute('''UPDATE stats SET mental_tasks = mental_tasks + 1 
                           WHERE chat_id = ? AND date = ?''',
                           (message.chat.id, today))

        if task_type in ["both", "physical"]:
            cursor.execute('''UPDATE stats SET physical_tasks = physical_tasks + 1 
                           WHERE chat_id = ? AND date = ?''',
                           (message.chat.id, today))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        cursor.execute('''SELECT last_active FROM users WHERE chat_id = ?''',
                       (message.chat.id,))
        last_active_row = cursor.fetchone()
        last_active = last_active_row[0] if last_active_row else None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é
        if last_active != today:
            cursor.execute('''UPDATE users 
                            SET streak = CASE WHEN last_active = date(?, '-1 day') THEN streak + 1 ELSE 1 END,
                                last_active = ?
                            WHERE chat_id = ?''',
                           (today, today, message.chat.id))

        conn.commit()
        await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", reply_markup=get_main_kb())
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è ‚è∞")
async def set_reminder_time(message: types.Message):
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    user_temp_data[f"waiting_time_{message.chat.id}"] = True


@dp.message(F.text.regexp(r'^\d{2}:\d{2}$'))
async def process_time_input(message: types.Message):
    if user_temp_data.get(f"waiting_time_{message.chat.id}"):
        try:
            time_str = message.text
            hours, minutes = map(int, time_str.split(':'))

            if 0 <= hours < 24 and 0 <= minutes < 60:
                conn = sqlite3.connect('users.db')
                cursor = conn.cursor()
                cursor.execute('''UPDATE users SET reminder_time = ? WHERE chat_id = ?''',
                               (time_str, message.chat.id))
                conn.commit()
                conn.close()

                await message.answer(
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {time_str}",
                    reply_markup=get_main_kb()
                )
                user_temp_data.pop(f"waiting_time_{message.chat.id}")

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                scheduler.remove_all_jobs()
                await setup_reminders()
            else:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –ß–ß:MM")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
@dp.message(F.text == "–ù–∞–∑–∞–¥ ‚Ü©Ô∏è")
async def back_to_main(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_kb())


# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è
@dp.message(F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚ùå")
async def skip_task(message: types.Message):
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", reply_markup=get_main_kb())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_startup():
    init_db()
    await setup_reminders()
    scheduler.start()


async def main():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())